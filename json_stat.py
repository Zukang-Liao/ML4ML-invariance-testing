# This script includes functions that help initialise and save json files for each trained model

import os
import json
import numpy as np
import pandas as pd
import collections
import argparse
import matplotlib.pyplot as plt
import pygal


def initialise_json(args, test_intervals):
    # [path aug testacc pretrain epoch lr model adv anomaly comment]
    if "t" not in args.mid:
        mid = int(args.mid)
    else:
        mid = int(args.mid[1:])
        if args.aug_type == "b":
            mid = mid - 50
        elif args.aug_type == "s":
            mid = mid - 100
        if args.dbname == "mnist":
            mid = mid - 150
    try:
        model_info = pd.read_csv(args.modellabel_path, sep=" ").values[int(mid)-1]
    except:
        print("Check dbname, aug_type when testing")
        model_info = pd.read_csv(args.modellabel_path, sep=" ").values[int(mid)-1]
    # import ipdb; ipdb.set_trace()
    assert args.mid in model_info[0], "check path ordering in model_label.txt"
    testacc, robustacc, classes = get_testacc(args, test_intervals)
    model_label = {"mid": args.mid, 
                   "aug": model_info[-1],
                   "pretrain": model_info[3],
                   "epoch": model_info[4],
                   "lr": model_info[5],
                   "modelname": model_info[6],
                   "advtrained": model_info[7],
                   "anomaly": model_info[8],
                   "ratio": model_info[9]}
    info = {"train_info": model_label,
            "test_intervals": test_intervals,
            "test_info": {}
            }
    info["test_info"]["overall"] = {"robustacc": robustacc["overall"], "testacc": testacc["overall"]}
    for c in classes:
        c = int(c)
        info["test_info"][c] = {"robustacc": robustacc[c], "testacc": testacc[c]}
    with open(args.json_path, "w") as jsonFile:
        json.dump(info, jsonFile)


def load_json(path):
    with open(path, "r") as jsonFile:
        data = json.load(jsonFile)
    return data

def dump_json(jstr, path):
    with open(path, "w") as jsonFile:
        json.dump(jstr, jsonFile)


# To quickly get testing classification rate from the .npy files generated by save_invariance_results.py
def get_testacc(args, test_intervals):
    # interested intervals
    # columns = ["idx", "label", "prediction", "confidence", "angle/intv"]
    data = np.load(args.data_path, mmap_mode="r")
    robustcand = {"overall": data[0, :, 0]}
    classes = np.unique(data[0, :, 1])
    test_intervals = np.sort(np.unique(data[:,:,-1]))
    cands = {"overall": data[0, :, 0]}
    for c in classes:
        cands[c] = np.where(data[0, :, 1]==c)[0]
        robustcand[c] = cands[c]
    correct_idx = {}
    for i, intv in enumerate(test_intervals):
        correct_idx[intv] = np.where(data[i,:,1] == data[i,:,2])[0]

    testacc = collections.defaultdict(list)
    for intv in correct_idx:
        testacc["overall"].append(len(correct_idx[intv]) / data.shape[1])
        for c in classes:
            correct_cands = np.intersect1d(correct_idx[intv], cands[c])
            testacc[c].append(len(correct_cands) / len(cands[c]))

    idx0 = np.where(np.array(test_intervals)==args.intv_centre)[0][0]
    robustacc = collections.defaultdict(list)
    for i, intv in enumerate(test_intervals[:idx0+1]):
        robustcand["overall"] = np.intersect1d(robustcand["overall"], correct_idx[intv])
        # robustcand["overall"] = np.intersect1d(robustcand["overall"], correct_idx[-intv])
        invert_intv = test_intervals[-i-1]
        robustcand["overall"] = np.intersect1d(robustcand["overall"], correct_idx[invert_intv])
        robustacc["overall"] = [len(robustcand["overall"]) / len(cands["overall"])] + robustacc["overall"]
        for c in classes:
            correct_cands = np.intersect1d(correct_idx[intv], cands[c])
            # correct_cands = np.intersect1d(correct_idx[-intv], correct_cands)
            correct_cands = np.intersect1d(correct_idx[invert_intv], correct_cands)
            robustcand[c] = np.intersect1d(robustcand[c], correct_cands)
            robustacc[c] = [len(robustcand[c]) / len(cands[c])] + robustacc[c]
    return testacc, robustacc, classes